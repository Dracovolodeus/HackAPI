"""init

Revision ID: 61d0e65d74ab
Revises:
Create Date: 2025-05-08 14:39:53.162716

"""

from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "61d0e65d74ab"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "author",
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("last_name", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_author")),
    )
    op.create_table(
        "role",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_role")),
    )
    op.create_table(
        "tag",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tag")),
    )
    op.create_table(
        "book",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("page_count", sa.Integer(), nullable=False),
        sa.Column("year", sa.Integer(), nullable=False),
        sa.Column("cover", sa.String(), nullable=False),
        sa.Column("author_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["author_id"], ["author.id"], name=op.f("fk_book_author_id_author")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_book")),
        sa.UniqueConstraint("name", name=op.f("uq_book_name")),
    )
    op.create_table(
        "user",
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("last_name", sa.String(), nullable=False),
        sa.Column("second_name", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("telegram_id", sa.Integer(), nullable=False),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column("phone", sa.String(), nullable=False),
        sa.Column("refresh_token", sa.String(), nullable=True),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"], ["role.id"], name=op.f("fk_user_role_id_role")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user")),
        sa.UniqueConstraint("email", name=op.f("uq_user_email")),
        sa.UniqueConstraint("phone", name=op.f("uq_user_phone")),
        sa.UniqueConstraint("telegram_id", name=op.f("uq_user_telegram_id")),
    )
    op.create_table(
        "book_tag",
        sa.Column("book_id", sa.Integer(), nullable=False),
        sa.Column("tags", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["book_id"], ["book.id"], name=op.f("fk_book_tag_book_id_book")
        ),
        sa.ForeignKeyConstraint(
            ["tags"], ["tag.id"], name=op.f("fk_book_tag_tags_tag")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_book_tag")),
    )
    op.create_table(
        "order",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("book_id", sa.Integer(), nullable=False),
        sa.Column("start_date", sa.Date(), nullable=False),
        sa.Column(
            "return_date", sa.Date(), server_default=sa.text("NULL"), nullable=True
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["book_id"], ["book.id"], name=op.f("fk_order_book_id_book")
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name=op.f("fk_order_user_id_user")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_order")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("order")
    op.drop_table("book_tag")
    op.drop_table("user")
    op.drop_table("book")
    op.drop_table("tag")
    op.drop_table("role")
    op.drop_table("author")
    # ### end Alembic commands ###
